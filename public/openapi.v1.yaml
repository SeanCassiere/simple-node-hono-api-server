openapi: 3.0.0
info:
  title: Node + Hono API Server
  version: 1.0.0
  description: This is a simple API server that runs on Node.js and uses Hono as the framework.

servers:
  - url: /api/v1
    description: Base URL

tags:
  - name: Users
    description: Routes that interact with the `User` entity.

externalDocs:
  description: GitHub Repository
  url: https://github.com/SeanCassiere/simple-node-hono-api-server

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        age:
          type: integer

paths:
  /users:
    get:
      operationId: get_users
      tags:
        - Users
      description: |-
        Get all users.
      parameters:
        - schema:
            type: string
          in: query
          name: name
          required: false
      responses:
        "200":
          description: All users.
          content:
            application/json:
              schema:
                description: All users
                type: array
                items:
                  $ref: "#/components/schemas/User"
    post:
      operationId: create_user
      tags:
        - Users
      description: Create a new user.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                age:
                  type: number
      responses:
        "201":
          description: Created service details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Service"
  /users/{id}:
    get:
      operationId: get_user
      tags:
        - Users
      description: Get a user by their ID.
      parameters:
        - schema:
            type: string
          in: path
          name: id
          required: true
      responses:
        "200":
          description: User found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: User not found.
    put:
      operationId: update_user
      tags:
        - Users
      description: Update a user by their ID.
      parameters:
        - schema:
            type: string
          in: path
          name: id
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                age:
                  type: number
      responses:
        "200":
          description: User updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: User not found.
    delete:
      operationId: delete_user
      tags:
        - Users
      description: Delete a user by their ID.
      parameters:
        - schema:
            type: string
          in: path
          name: id
          required: true
      responses:
        "204":
          description: User deleted.
        "404":
          description: User not found
